@model PathfinderToolkit.Models.Resources.Ability

@*Inheritance: The '@model' directive indicates that the Razor view is inheriting from 
the PathfinderToolkit.Models.Resources.Ability model class.*@

<form method="post">
    <select id="abilityDropdown" name="abilityDropdown">
        <option value="">Select an ability</option>
        @foreach (var ability in ViewBag.Abilities ?? Enumerable.Empty<SelectListItem>())
        {
            <option value="@ability.Value">@ability.Text</option>
        }
    </select>
    <button type="submit">Submit</button>
</form>

@*Encapsulation: The HTML and Razor code is organized into blocks, each with its own set of braces '{ }',
which encapsulate the content and functionality of that block. 
This helps to keep the code organized and maintainable.*@

@*Abstraction: The @if statements are used to abstract the display of certain sections of 
the view based on the presence or absence of data in the model, hiding details of the view from the user.*@

@if (Model != null)
{    
    <div class="ability-table">
        <div class="ability-container">
            <div class="ability-header">Name</div>
            <div class="ability-content ability-name">@Model.name</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Source</div>
            <div class="ability-content">@Model.source</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Page</div>
            <div class="ability-content">@Model.page</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Creatures</div>
            <div class="ability-content">
                @if (Model.creature != null && Model.creature.Any())
                {
                    <ul>
                        @foreach (var creature in Model.creature)
                        {
                            <li>@creature</li>
                        }
                    </ul>
                }
                else
                {
                    <p>No creatures available</p>
                }
            </div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Activity</div>
            <div class="ability-content">
                @if (Model.activity != null)
                {
                    <ul>
                        <li>Name: @Model.activity.number</li>
                        <li>Type: @Model.activity.entry</li>
                        <li>Components: @Model.activity.unit</li>
                    </ul>
                }
                else
                {
                    <p>No activity available</p>
                }
            </div>
        </div>
        @*Polymorphism: The Html.Raw helper method is used to display various types of data such as strings, 
        lists, and objects in the view, demonstrating the concept of polymorphism where a method 
        can be used to handle different data types.*@

        <div class="ability-container">
            <div class="ability-header">Traits</div>
            @*This works for a list of strings*@
            <div class="ability-content">@Html.Raw(string.Join("<br>", (Model.traits ?? Enumerable.Empty<string>()).Select(e => e.ToString())))</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Trigger</div>
            @*This works for a string which may be null*@
            <div class="ability-content">@(Model.trigger ?? "")</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Requirements</div>
            <div class="ability-content">@(Model.requirements ?? "")</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Entries</div>
            @*This works for a list of objects*@
            <div class="ability-content">@Html.Raw(string.Join("<br>", Model.entries.Select(e => e.ToString())))</div>
        </div>
        <div class="ability-container">
            <div class="ability-header">Frequency</div>
            @(Model.frequency != null ? $"{Model.frequency.freq} per {Model.frequency.special}" : "")
        </div>

    </div>   
}